// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobiSell.Data;

#nullable disable

namespace MobiSell.Migrations
{
    [DbContext(typeof(MobiSellContext))]
    [Migration("20250220163804_NewDb")]
    partial class NewDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MobiSell.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DayCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(8772),
                            Description = "",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 2,
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(8785),
                            Description = "",
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 3,
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(8786),
                            Description = "",
                            Name = "Xiaomi"
                        },
                        new
                        {
                            Id = 4,
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(8787),
                            Description = "",
                            Name = "Oppo"
                        },
                        new
                        {
                            Id = 5,
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(8788),
                            Description = "",
                            Name = "Vivo"
                        },
                        new
                        {
                            Id = 6,
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(8789),
                            Description = "",
                            Name = "Huawei"
                        });
                });

            modelBuilder.Entity("MobiSell.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MobiSell.Models.Cart_Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("Product_SKUId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("Product_SKUId");

                    b.ToTable("Cart_Items");
                });

            modelBuilder.Entity("MobiSell.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<string>("ReceiverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.Property<int>("payment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MobiSell.Models.Order_Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Product_SKUId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("Product_SKUId");

                    b.ToTable("Order_Items");
                });

            modelBuilder.Entity("MobiSell.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accessories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Battery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Charger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LxWxHxW")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<string>("RearCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessories = "",
                            Battery = "33 giờ",
                            BrandId = 1,
                            Charger = "20W",
                            Chip = "Apple A18 Pro 6 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9027),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9028),
                            Description = "",
                            Display = "OLED",
                            FrontCamera = "12 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 163 mm - Ngang 77.6 mm - Dày 8.25 mm - Nặng 227 g",
                            Name = "Iphone 16 Pro max",
                            Quality = 10,
                            RearCamera = "Chính 48 MP & Phụ 48 MP, 12 MP",
                            Size = "6.9\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 2,
                            Accessories = "",
                            Battery = "22 giờ",
                            BrandId = 1,
                            Charger = "20W",
                            Chip = "Apple A18 6 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9031),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9032),
                            Description = "",
                            Display = "OLED",
                            FrontCamera = "12 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 147.6 mm - Ngang 71.6 mm - Dày 7.8 mm - Nặng 170 g",
                            Name = "Iphone 16 ",
                            Quality = 10,
                            RearCamera = "Chính 48 MP & Phụ 12 MP",
                            Size = "6.1\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 3,
                            Accessories = "",
                            Battery = "27 giờ",
                            BrandId = 1,
                            Charger = "20W",
                            Chip = "Apple A18 Pro 6 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9034),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9035),
                            Description = "",
                            Display = "OLED",
                            FrontCamera = "12 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 149.6 mm - Ngang 71.5 mm - Dày 8.25 mm - Nặng 199 g",
                            Name = "Iphone 16 Pro",
                            Quality = 10,
                            RearCamera = "Chính 48 MP & Phụ 48 MP, 12 MP",
                            Size = "6.3\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 4,
                            Accessories = "",
                            Battery = "5800 mAh",
                            BrandId = 4,
                            Charger = "45W",
                            Chip = "Snapdragon 6 Gen 1 5G 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9040),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9040),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "32 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 162.2 mm - Ngang 75.05 mm - Dày 7.76 mm - Nặng 192 g",
                            Name = "OPPO Reno13 F 5G",
                            Quality = 10,
                            RearCamera = "Chính 50 MP & Phụ 8 MP, 2 MP",
                            Size = "6.67\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 5,
                            Accessories = "",
                            Battery = "5600 mAh",
                            BrandId = 4,
                            Charger = "80W",
                            Chip = "MediaTek Dimensity 8350 5G 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9043),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9044),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "50 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 157.9 mm - Ngang 74.73 mm - Dày 7.24 mm - Nặng 181 g",
                            Name = "OPPO Reno13 5G",
                            Quality = 10,
                            RearCamera = "Chính 50 MP & Phụ 8 MP, 2 MP",
                            Size = "6.59\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 6,
                            Accessories = "",
                            Battery = "5800 mAh",
                            BrandId = 4,
                            Charger = "80W",
                            Chip = "MediaTek Dimensity 8350 5G 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9046),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9047),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "50 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 162.73 mm - Ngang 76.55 mm - Dày 7.55 mm - Nặng 195 g",
                            Name = "OPPO Reno13 Pro 5G",
                            Quality = 10,
                            RearCamera = "Chính 50 MP & Phụ 50 MP, 8 MP",
                            Size = "6.83\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 7,
                            Accessories = "",
                            Battery = "4000 mAh",
                            BrandId = 2,
                            Charger = "25W",
                            Chip = "Qualcomm Snapdragon 8 Elite For Galaxy 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9049),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9049),
                            Description = "",
                            Display = "Dynamic AMOLED 2X",
                            FrontCamera = "12 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 146.9 mm - Ngang 70.5 mm - Dày 7.2 mm - Nặng 162 g",
                            Name = "Samsung Galaxy S25 5G",
                            Quality = 10,
                            RearCamera = "Chính 50 MP & Phụ 12 MP, 10 MP",
                            Size = "6.2\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 8,
                            Accessories = "",
                            Battery = "5000 mAh",
                            BrandId = 2,
                            Charger = "45W",
                            Chip = "Qualcomm Snapdragon 8 Elite For Galaxy 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9052),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9052),
                            Description = "",
                            Display = "Dynamic AMOLED 2X",
                            FrontCamera = "12 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 162.8 mm - Ngang 77.6 mm - Dày 8.2 mm - Nặng 218 g",
                            Name = "Samsung Galaxy S25 Ultra 5G",
                            Quality = 10,
                            RearCamera = "Chính 200 MP & Phụ 50 MP, 50 MP, 10 MP",
                            Size = "6.9\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 9,
                            Accessories = "",
                            Battery = "5000 mAh",
                            BrandId = 2,
                            Charger = "45W",
                            Chip = "Snapdragon 8 Gen 3 for Galaxy",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9055),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9056),
                            Description = "",
                            Display = "Dynamic AMOLED 2X",
                            FrontCamera = "12 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 162.3 mm - Ngang 79 mm - Dày 8.6 mm - Nặng 232 g",
                            Name = "Samsung Galaxy S24 Ultra 5G",
                            Quality = 10,
                            RearCamera = "Chính 200 MP & Phụ 50 MP, 12 MP, 10 MP",
                            Size = "6.8\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 10,
                            Accessories = "",
                            Battery = "5500 mAh",
                            BrandId = 3,
                            Charger = "33W",
                            Chip = "MediaTek Helio G99-Ultra 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9058),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9059),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "20 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 163.25 mm - Ngang 76.55 mm - Dày 8.16 mm - Nặng 196.5 g",
                            Name = "Xiaomi Redmi Note 14",
                            Quality = 10,
                            RearCamera = "Chính 108 MP & Phụ 2 MP, 2 MP",
                            Size = "6.67\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 11,
                            Accessories = "",
                            Battery = "5500 mAh",
                            BrandId = 3,
                            Charger = "45W",
                            Chip = "MediaTek Helio G100-Ultra 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9061),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9062),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "32 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 162.16 mm - Ngang 74.92 mm - Dày 8.24 mm - Nặng 180 g",
                            Name = "Xiaomi Redmi Note 14 Pro",
                            Quality = 10,
                            RearCamera = "Chính 200 MP & Phụ 8 MP, 2 MP",
                            Size = "6.67\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 12,
                            Accessories = "",
                            Battery = "5110 mAh",
                            BrandId = 3,
                            Charger = "45W",
                            Chip = "MediaTek Dimensity 7300-Ultra 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9065),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9065),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "20 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 162.33 mm - Ngang 74.42 mm - Dày 8.4 mm - Nặng 190 g",
                            Name = "Xiaomi Redmi Note 14 Pro 5G",
                            Quality = 10,
                            RearCamera = "Chính 200 MP & Phụ 8 MP, 2 MP",
                            Size = "6.67\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 13,
                            Accessories = "",
                            Battery = "5000 mAh",
                            BrandId = 5,
                            Charger = "44W",
                            Chip = "Snapdragon 695 5G 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9068),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9068),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "50 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 162.35 mm - Ngang 74.85 mm - Dày 7.69 mm - Nặng 190 g",
                            Name = "Vivo V29e 5G",
                            Quality = 10,
                            RearCamera = "Chính 64 MP & Phụ 8 MP",
                            Size = "6.67\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 14,
                            Accessories = "",
                            Battery = "5000 mAh",
                            BrandId = 5,
                            Charger = "80W",
                            Chip = "Snapdragon 4 Gen 2 5G 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9070),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9071),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "8 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 163.17 mm - Ngang 75.81 mm - Dày 7.79 mm - Nặng 186 g",
                            Name = "Vivo Y100 5G",
                            Quality = 10,
                            RearCamera = "Chính 50 MP & Phụ 2 MP",
                            Size = "6.67\"",
                            Sold = 0
                        },
                        new
                        {
                            Id = 15,
                            Accessories = "",
                            Battery = "5000 mAh",
                            BrandId = 5,
                            Charger = "15W",
                            Chip = "MediaTek Helio G85 8 nhân",
                            DayCreate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9074),
                            DayUpdate = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9074),
                            Description = "",
                            Display = "AMOLED",
                            FrontCamera = "8 MP",
                            IsAvailable = true,
                            LxWxHxW = "Dài 163.74 mm - Ngang 75.43 mm - Dày 8.09 mm - Nặng 186 g",
                            Name = "Vivo Y17s",
                            Quality = 10,
                            RearCamera = "Chính 50 MP & Phụ 2 MP",
                            Size = "6.56\"",
                            Sold = 0
                        });
                });

            modelBuilder.Entity("MobiSell.Models.Product_Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Images");
                });

            modelBuilder.Entity("MobiSell.Models.Product_SKU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<double>("DefaultPrice")
                        .HasColumnType("float");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RAM_ROM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_SKUs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Xanh",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9112),
                            Default = false,
                            DefaultPrice = 35000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 34999000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9118),
                            ProductId = 1,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 2,
                            Color = "Đen",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9121),
                            Default = false,
                            DefaultPrice = 34500000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 34499000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9121),
                            ProductId = 1,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 3,
                            Color = "Xanh",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9123),
                            Default = false,
                            DefaultPrice = 41000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 40999000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9124),
                            ProductId = 1,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 4,
                            Color = "Đen",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9126),
                            Default = false,
                            DefaultPrice = 40000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 39999000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9126),
                            ProductId = 1,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 5,
                            Color = "Trắng",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9128),
                            Default = false,
                            DefaultPrice = 40000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 39999000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9130),
                            ProductId = 1,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 6,
                            Color = "Đen",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9131),
                            Default = false,
                            DefaultPrice = 25000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 24999000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9132),
                            ProductId = 2,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 7,
                            Color = "Trắng",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9134),
                            Default = false,
                            DefaultPrice = 24500000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 24499000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9134),
                            ProductId = 2,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 8,
                            Color = "Xanh",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9136),
                            Default = false,
                            DefaultPrice = 25000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 24999000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9137),
                            ProductId = 2,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 9,
                            Color = "Xanh",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9138),
                            Default = false,
                            DefaultPrice = 28000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 27999000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9139),
                            ProductId = 2,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 10,
                            Color = "Trắng",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9141),
                            Default = false,
                            DefaultPrice = 28000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 27999000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9141),
                            ProductId = 2,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 11,
                            Color = "Đỏ",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9143),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9144),
                            ProductId = 3,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 12,
                            Color = "Trắng",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9145),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9146),
                            ProductId = 3,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 13,
                            Color = "Xanh",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9147),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9148),
                            ProductId = 3,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 14,
                            Color = "Đỏ",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9185),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9185),
                            ProductId = 3,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 15,
                            Color = "Trắng",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9187),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9187),
                            ProductId = 3,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 16,
                            Color = "Đen",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9189),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9190),
                            ProductId = 4,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 17,
                            Color = "Xanh",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9192),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9192),
                            ProductId = 4,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 18,
                            Color = "Trắng",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9194),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9194),
                            ProductId = 4,
                            Quantity = 3,
                            RAM_ROM = "64Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 19,
                            Color = "Trắng",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9196),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9196),
                            ProductId = 4,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        },
                        new
                        {
                            Id = 20,
                            Color = "Đen",
                            CreatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9198),
                            Default = false,
                            DefaultPrice = 10000000.0,
                            DiscountPercentage = 0.0,
                            FinalPrice = 10000000.0,
                            ImageName = "",
                            IsAvailable = true,
                            LastUpdatedAt = new DateTime(2025, 2, 20, 23, 38, 1, 820, DateTimeKind.Local).AddTicks(9199),
                            ProductId = 4,
                            Quantity = 3,
                            RAM_ROM = "128Gb",
                            SKU = "sku",
                            Sold = 0
                        });
                });

            modelBuilder.Entity("MobiSell.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MobiSell.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MobiSell.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MaxDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("MinOrderAmount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("MobiSell.Models.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MobiSell.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MobiSell.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobiSell.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MobiSell.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobiSell.Models.Cart", b =>
                {
                    b.HasOne("MobiSell.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobiSell.Models.Cart_Item", b =>
                {
                    b.HasOne("MobiSell.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobiSell.Models.Product_SKU", "Product_SKU")
                        .WithMany()
                        .HasForeignKey("Product_SKUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product_SKU");
                });

            modelBuilder.Entity("MobiSell.Models.Order", b =>
                {
                    b.HasOne("MobiSell.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("MobiSell.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("MobiSell.Models.Order_Item", b =>
                {
                    b.HasOne("MobiSell.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobiSell.Models.Product_SKU", "Product_SKU")
                        .WithMany()
                        .HasForeignKey("Product_SKUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product_SKU");
                });

            modelBuilder.Entity("MobiSell.Models.Product", b =>
                {
                    b.HasOne("MobiSell.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MobiSell.Models.Product_Image", b =>
                {
                    b.HasOne("MobiSell.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MobiSell.Models.Product_SKU", b =>
                {
                    b.HasOne("MobiSell.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MobiSell.Models.Review", b =>
                {
                    b.HasOne("MobiSell.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobiSell.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MobiSell.Models.WishList", b =>
                {
                    b.HasOne("MobiSell.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobiSell.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
